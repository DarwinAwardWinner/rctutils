% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edgeR_utils.R
\name{cpmWithOffset}
\alias{cpmWithOffset}
\title{Version of \code{edgeR::cpm()} that uses offsets}
\usage{
cpmWithOffset(y, offset, ...)
}
\arguments{
\item{y, log, prior.count, ...}{These arguments have the same meaning
as in \code{\link[edgeR:cpm]{edgeR::cpm()}}, except that if \code{y} is a
\code{edgeR::DGEList()}, the offset matrix will be used in favor of
the sample normalized library sizes. Note that \code{lib.size} is
not an accepted argument.}

\item{offset}{The offset matrix to use. If \code{y} is a DGEList, this
is determined automatically.}

\item{...}{Additional arguments are passed to \code{\link[edgeR:cpm]{edgeR::cpm()}}.}

\item{preserve.mean}{If TRUE (the default), scale each row of
\code{offset} such that the average CPM is the same as it would be
without the offset.}
}
\value{
A numeric matrix of CPM values, normalized using the
provided offset matrix.

If \code{y} is a DGEList with no offset matrix, \code{offset} is generated
from the normalized library sizes.
}
\description{
This is the same as \code{\link[edgeR:cpm]{edgeR::cpm()}}, except that when called on a
\code{\link[edgeR:DGEList]{edgeR::DGEList()}} object that contains an offset matrix, that
matrix will be used by default for normalization instead of the
library sizes and normalization factors. If called on a matrix of
counts, the offset must be supplied manually.
}
\examples{

# TODO Steal from cpm and maybe scaleOffset

}
\seealso{
\code{\link[edgeR:getCounts]{edgeR::getOffset()}}, \code{\link[edgeR:scaleOffset]{edgeR::scaleOffset()}}, \code{\link[edgeR:cpm]{edgeR::cpm()}}
}

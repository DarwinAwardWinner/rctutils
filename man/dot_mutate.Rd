% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prog_utils.R
\name{dot_mutate}
\alias{dot_mutate}
\title{Evaluate an arbitrary mutating expression in a magrittr pipe}
\usage{
dot_mutate(x, expr)
}
\arguments{
\item{x}{The object to assign into. (Typically this argument is
delivered via \code{\%\>\%()}.)}

\item{expr}{The expression to be evaluated with \code{.} set to
\code{x}. Typically this expression modifies \code{.} in some
way, e.g. by performing an assignment with \code{.} on the
left-hand side.}
}
\value{
The value of \code{x} after evaluating \code{expr}.

As usual, \code{x}, the object being passed in, should be
referenced in \code{expr} as \code{.}.

Note that this function uses the lazyeval package rather than its
apparent successor, rlang, because rlang doesn't support
interpolating expressions on the left-hand-side of an assignment
operation: https://github.com/r-lib/rlang/issues/212.
}
\description{
Evaluate an arbitrary mutating expression in a magrittr pipe
}
\examples{

library(magrittr)

# Returns the entire list, not just a single element
list(a = 1, b = 2, c = 3) \%>\%
  dot_mutate(.$d <- 4) \%>\%
  dot_mutate({ .$e <- 5; .$f <- 6})

# Compare:
list(a = 1, b = 2, c = 3) \%>\%
  {.$d <- 4} \%>\%
  print

}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/prog_utils.R
\name{make_futures_}
\alias{make_futures_}
\title{Construct futures for a list of expressions}
\usage{
make_futures_(expressions, .future.args = list())
}
\arguments{
\item{expressions}{The list of unevaluated expressions for which to
construct futures. Each element can be anything that
\code{\link[rlang:as_quosure]{rlang::as_quosure()}} will accept.}

\item{.future.args}{Additional arguments to pass to
\code{\link[future:future]{future::future()}}.}
}
\value{
A list of futures, whose values will be the result of
evaluating each of \code{expressions}.
}
\description{
Instead of evaluating the expressions in the list, this function
constructs a future for each expression and returns the list of
these futures.
}
\details{
This is the standard-evaluation helper for \code{\link[=make_futures]{make_futures()}}, which
uses non-standard evaluation.
}
\examples{

library(future)
library(rlang)
expressions <- list(a = quo(1+1), b = quo(2+2))

flist <- make_futures_(expressions)
flist
values(flist)

# Same result without futures
lapply(expressions, eval_tidy)

}
\seealso{
\code{\link[rlang:eval_tidy]{rlang::eval_tidy()}}, \code{\link[rlang:quo]{rlang::quo()}}, \code{\link[rlang:as_quosure]{rlang::as_quosure()}}, \code{\link[future:values]{future::values()}}
}

% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/limma_utils.R
\name{voomWithOffset}
\alias{voomWithOffset}
\title{Implementation of \code{limma::voom()} that uses an offset matrix}
\usage{
voomWithOffset(
  counts,
  design = NULL,
  offset,
  normalize.method = "none",
  span = 0.5,
  plot = FALSE,
  save.plot = FALSE,
  ...
)
}
\arguments{
\item{counts, design, normalize.method, span, plot, save.plot, ...}{These arguments have the same meaning as in \code{limma::voom()}.}

\item{offset}{An offset matrix to be used in computing log2 CPM
values. This is optional only if \code{counts} is a
\code{\link[edgeR:DGEList]{edgeR::DGEList()}}.}
}
\value{
An EList object like that returned by \code{\link[limma:voom]{limma::voom()}}, but
with log2 CPM values computed using the offset matrix.

If \code{counts} is a DGEList object that does not contain an offset
matrix, one will be generated from the normalized library sizes,
yielding identical behavior to \code{limma::voom()}. Hence, this is
generally usable as a drop-in replacement for \code{limma::voom()}.
}
\description{
Unlike \code{\link[limma:voom]{limma::voom()}}, this function can use an offset matrix
instead of normalization factors. This is useful for using limma
with gene-level estimated counts from Salmon or Kallisto, for which
an offset matrix can be produced from the effective gene lengths.
}
\examples{

# TODO: Copy from voom

}
\seealso{
\code{\link[edgeR:getCounts]{edgeR::getOffset()}}
}
